@using HospitalManagement.ViewModels;
@model X.PagedList.IPagedList<AppointmentDetailDto>
@{
    ViewData["Title"] = $"Chi tiết cuộc hẹn {ViewBag.Month:D2}/{ViewBag.Year}";
}
<style>
    #loadingOverlay {
        display: none !important;
    }
</style>
<div class="container mt-4">
    <h2 class="text-center mb-4 text-primary">📅 Chi tiết cuộc hẹn tháng @(ViewBag.Month)/@(ViewBag.Year)</h2>

    <!-- Chart row -->
    <div class="row mb-4">
            <!-- Service Type Pie -->
            <div class="col-md-4 d-flex flex-column align-items-center">
                <h5 class="mb-2">Tỷ lệ theo ServiceType</h5>
                <div style="width: 250px; height: 250px;">
                    <canvas id="serviceChart"></canvas>
                </div>
                <div id="serviceLegend" class="mt-2 small"></div>
            </div>

            <!-- PackageName Pie -->
            <div class="col-md-4 d-flex flex-column align-items-center">
                <h5 class="mb-2">Tỷ lệ theo PackageName</h5>
                <div style="width: 250px; height: 250px;">
                    <canvas id="packageChart"></canvas>
                </div>
                <div id="packageLegend" class="mt-2 small"></div>
            </div>

            <!-- Sales Pie -->
            <div class="col-md-4 d-flex flex-column align-items-center">
                <h5 class="mb-2">Tỷ lệ do Sales tạo</h5>
                <div style="width: 250px; height: 250px;">
                    <canvas id="salesChart"></canvas>
                </div>
                <div id="salesLegend" class="mt-2 small"></div>
            </div>
    </div>

    <!-- Table -->
    <table class="table table-bordered table-striped">
        <thead class="table-dark">
            <tr>
                <th>ID</th>
                <th>Bệnh nhân</th>
                <th>Bác sĩ</th>
                <th>Dịch vụ</th>
                <th>Gói khám</th>
                <th>Nhân viên tư vấn</th>
                <th>Tiền (VND)</th>
                <th>Ngày</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var a in Model)
            {
                <tr>
                    <td>@a.AppointmentId</td>
                    <td>@a.PatientName</td>
                    <td>@a.DoctorName</td>
                    <td>@(a.ServiceType ?? "N/A")</td>
                    <td>@(a.PackageName ?? "N/A")</td>
                    <td>@(a.StaffRoleName == "Sales" ? a.StaffName : "N/A")</td>
                    <td>@string.Format("{0:N0}", a.TotalPrice) VND</td>
                    <td>@a.Date.ToString("dd/MM/yyyy")</td>
                </tr>
            }
        </tbody>
    </table>
    <form asp-action="ExportMonthlyAppointmentsToExcel" method="post" class="mb-3 text-end">
        <input type="hidden" name="year" value="@ViewBag.Year" />
        <input type="hidden" name="month" value="@ViewBag.Month" />
        <button type="submit" class="btn btn-success">📥 Xuất Excel</button>
    </form>

    <!-- Pagination start -->
    @{
    int maxPagesToShow = 5;
    int startPage = Model.PageNumber - maxPagesToShow / 2;
    if (startPage < 1) startPage = 1;

    int endPage = startPage + maxPagesToShow - 1;
    if (endPage > Model.PageCount)
    {
        endPage = Model.PageCount;
        startPage = Math.Max(1, endPage - maxPagesToShow + 1);
    }
    }
    @if (Model.PageCount > 1)
    {
        <div class="d-flex justify-content-center mt-5">
            <nav>
                <ul class="pagination">

                    @* Previous button *@
                    <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                        <a class="page-link" href="@(Model.HasPreviousPage ? Url.Action("MonthlyDetail", new {
									page = Model.PageNumber - 1,
                                    year = ViewBag.Year,
									month = ViewBag.Month}) : "#")" tabindex="-1">Trước</a>
                    </li>

                    @* Trang đầu nếu startPage > 1 và dấu "..." *@
                    @if (startPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("MonthlyDetail", new {
									page = 1,
                                    year = ViewBag.Year,
                                    month = ViewBag.Month})">1</a>
                        </li>
                        @if (startPage > 2)
                        {
                            <li class="page-item disabled"><span class="page-link">...</span></li>
                        }
                    }

                    @* Các trang hiển thị trong khoảng từ startPage đến endPage *@
                    @for (int i = startPage; i <= endPage; i++)
                    {
                        <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                            <a class="page-link" href="@Url.Action("MonthlyDetail", new {
									page = i,
                                    year = ViewBag.Year,
									month = ViewBag.Month})">@i</a>
                                </li>
                            }

                    @* Trang cuối nếu endPage < total pages và dấu "..." *@
                    @if (endPage < Model.PageCount)
                    {
                        if (endPage < Model.PageCount - 1)
                        {
                            <li class="page-item disabled"><span class="page-link">...</span></li>
                        }
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("MonthlyDetail", new {
									page = Model.PageCount,
                                    year = ViewBag.Year,
									month = ViewBag.Month})">@Model.PageCount</a>
                                </li>
                            }

                            @* Next button *@
                    <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                        <a class="page-link" href="@(Model.HasNextPage ? Url.Action("MonthlyDetail", new {
									page = Model.PageNumber + 1,
                                    year = ViewBag.Year,
									month = ViewBag.Month}) : "#")">Sau</a>
                    </li>

                </ul>
            </nav>
        </div>
    }
    <!-- Pagination end -->
    
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    const colors = [
        '#FF6384', '#36A2EB', '#FFCE56', '#8E44AD', '#2ECC71',
        '#E67E22', '#3498DB', '#E74C3C', '#1ABC9C', '#F39C12'
    ];

    // Dữ liệu dịch vụ
    const serviceData = @Html.Raw(Json.Serialize(ViewBag.ServiceGroups));
    const serviceLabels = serviceData.map(x => x.name);
    const serviceCounts = serviceData.map(x => x.count);

    // Dữ liệu gói khám
    const packageData = @Html.Raw(Json.Serialize(ViewBag.PackageGroups));
    const packageLabels = packageData.map(x => x.name);
    const packageCounts = packageData.map(x => x.count);

    // Dữ liệu Sales
    const salesStats = @Html.Raw(Json.Serialize(ViewBag.SalesStats));
    const salesLabels = ['Sales', 'Khác'];
    const salesCounts = [salesStats.salesCount, salesStats.total - salesStats.salesCount];

    // Chart options (tắt legend trong canvas)
    const pieOptions = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                display: false
            }
        }
    };

    // Vẽ biểu đồ
    new Chart(document.getElementById('serviceChart'), {
        type: 'pie',
        data: {
            labels: serviceLabels,
            datasets: [{
                data: serviceCounts,
                backgroundColor: colors
            }]
        },
        options: pieOptions
    });

    new Chart(document.getElementById('packageChart'), {
        type: 'pie',
        data: {
            labels: packageLabels,
            datasets: [{
                data: packageCounts,
                backgroundColor: colors
            }]
        },
        options: pieOptions
    });

    new Chart(document.getElementById('salesChart'), {
        type: 'pie',
        data: {
            labels: salesLabels,
            datasets: [{
                data: salesCounts,
                backgroundColor: ['#2ECC71', '#E74C3C']
            }]
        },
        options: pieOptions
    });

    // Hàm tạo legend bên ngoài
    function createLegend(containerId, labels, colors) {
        const container = document.getElementById(containerId);
        container.innerHTML = labels.map((label, i) => `
            <div class="d-flex align-items-center justify-content-center mb-1">
                <div style="width: 12px; height: 12px; background-color: ${colors[i]}; margin-right: 6px;"></div>
                <span>${label}</span>
            </div>
        `).join('');
    }

    // Gọi tạo legend
    createLegend('serviceLegend', serviceLabels, colors);
    createLegend('packageLegend', packageLabels, colors);
    createLegend('salesLegend', salesLabels, ['#2ECC71', '#E74C3C']);
</script>

