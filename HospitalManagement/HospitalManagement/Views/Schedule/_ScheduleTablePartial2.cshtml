@model List<Slot>
@using Newtonsoft.Json;
@{
	int selectedYear = (int)ViewBag.SelectedYear;
	DateOnly selectedWeekStart = (DateOnly)ViewBag.SelectedWeekStart;
	DateOnly selectedWeekEnd = selectedWeekStart.AddDays(6);
	DateOnly firstWeekStart = new DateOnly(selectedYear, 1, 1).AddDays(-((int)new DateTime(selectedYear, 1, 1).DayOfWeek + 6) % 7);
	DateOnly lastWeekStart = new DateOnly(selectedYear, 12, 25).AddDays(-((int)new DateTime(selectedYear, 12, 25).DayOfWeek + 6) % 7);

	DateOnly prevWeek = selectedWeekStart.AddDays(-7);
	DateOnly nextWeek = selectedWeekStart.AddDays(7);

	var daysInWeek = Enumerable.Range(0, 7).Select(i => selectedWeekStart.AddDays(i)).ToList();
	var slotsPerDay = ViewBag.SlotsPerDay;

	var successList = ViewBag.SuccessList as List<string> ?? new List<string>();
    var failList = ViewBag.FailList as List<string> ?? new List<string>();

    var doctorSchedules = ViewBag.DoctorSchedules as List<DoctorScheduleViewModel.ScheduleItem> ?? new List<DoctorScheduleViewModel.ScheduleItem>();

}

<div class="d-flex justify-content-center align-items-center mb-3 gap-2">
	<!-- Cụm nút tuần ở giữa -->
	<div class="d-flex align-items-center gap-2">
		<!-- Nút tuần trước -->
		<button  type="button" class="btn btn-outline-primary" onclick="changeWeek(-1)" @(selectedWeekStart <= firstWeekStart ? "disabled" : "")>
			<i class="bi bi-chevron-left"></i>
		</button>

		<!-- Dropdown tuần -->
		<select id="weekDropdown" class="form-select" onchange="updateSchedule()" style="width:250px;">
			@{
				var start = firstWeekStart;
				var end = lastWeekStart;
				while (start <= end)
				{
					var endOfWeek = start.AddDays(6);
					var label = $"{start:dd/MM} - {endOfWeek:dd/MM}";
					if (start == selectedWeekStart)
					{
						<option value="@start.ToString("yyyy-MM-dd")" selected> @label </option>
					}
					else
					{
						<option value="@start.ToString("yyyy-MM-dd")"> @label </option>
					}

					start = start.AddDays(7);
				}
			}
		</select>

		<!-- Nút tuần sau -->
		<button type="button" class="btn btn-outline-primary" onclick="changeWeek(1)" @(selectedWeekStart >= lastWeekStart ? "disabled" : "")>
			<i class="bi bi-chevron-right"></i>
		</button>


		<button type="button" onclick="resetSelectedSlots()" class="btn btn-primary mt-3">Làm mới lựa chọn</button>

	</div>

	<!-- (Có thể để trống hoặc thêm gì đó bên phải nếu muốn căn giữa tốt hơn) -->
	<div style="width:100px;"></div>
</div>


<!-- Bảng lịch -->
<div>
	<table class="table table-bordered text-center">
		<thead class="table-light">
			<tr>
				<th>Slot</th>
				@foreach (var day in daysInWeek)
				{
					<th>@day.ToString("ddd dd/MM")</th>
				}
			</tr>
		</thead>
		<tbody>
			@for (int slot = 1; slot <= slotsPerDay; slot++)
			{
				<tr>
					<td><strong>Slot @slot</strong></td>
					@foreach (var day in daysInWeek)
					{
						<td>
							@if (day > DateOnly.FromDateTime(DateTime.Now))
							{
								var schedule = doctorSchedules.FirstOrDefault(s => s.Day == day && s.SlotId == slot);
								var slotKey = $"{day:yyyy-MM-dd}_{slot}";

								if (schedule != null)
								{
									<div class="schedule-card slot-working" id="@slotKey">
										<div><i class="bi bi-clock me-1"></i> @schedule.StartTime - @schedule.EndTime</div>
										<div><i class="fa fa-door-closed me-1"></i> @schedule.RoomName</div>
									</div>
								}
								else if (successList.Contains(slotKey))
								{
									<div class="schedule-card slot-success" id="@slotKey">
										<div><i class="bi bi-clock me-1"></i> Thêm thành công</div>
									</div>
								}
								else if (failList.Contains(slotKey))
								{
									<div class="schedule-card slot-fail" id="@slotKey">
										<div><i class="bi bi-clock me-1"></i> Trùng lịch / phòng không hợp lệ</div>
									</div>
								}
								else
								{
									<div class="schedule-slot" data-slot="@slot" data-date="@day.ToString("yyyy-MM-dd")">
										<input type="hidden" name="SlotStates[@slotKey]" value="false" />
										<div class="schedule-card slot-inactive" id="@slotKey"
											data-start="@Model[slot - 1].StartTime.ToString("HH:mm")"
											data-end="@Model[slot - 1].EndTime.ToString("HH:mm")"
											onclick="toggleSlot(this)">
											<div><i class="bi bi-clock me-1"></i> @Model[slot - 1].StartTime.ToString("HH:mm") - @Model[slot - 1].EndTime.ToString("HH:mm")</div>
											<div><i class="fas fa-bars"></i> Chưa chọn</div>
										</div>
									</div>
								}
							}
							else{
								var schedule = doctorSchedules.FirstOrDefault(s => s.Day == day && s.SlotId == slot);
								var slotKey = $"{day:yyyy-MM-dd}_{slot}";

								@if (schedule != null)
								{
									<div class="schedule-card slot-working" id="@slotKey">
										<div><i class="bi bi-clock me-1"></i> @schedule.StartTime - @schedule.EndTime</div>
										<div><i class="fa fa-door-closed me-1"></i> @schedule.RoomName</div>
									</div>
								}
							}							
						</td>
					}

				</tr>
			}
		</tbody>
	</table>
</div>

@section Scripts { 
    <script>
        const doctorList = @Html.Raw(Json.Serialize(ViewBag.ListDoctor)); // all active doctor (CardViewModel)
    </script>

    <script src="~/js/ManageSchedule.js" asp-append-version="true"></script> 
}