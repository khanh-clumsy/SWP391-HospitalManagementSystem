@model HospitalManagement.ViewModels.ResetPasswordModel
@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">

<head>
    <title>Reset Password</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

   	<link rel="icon" type="image/png" href="~/img/icons/favicon.ico" />
	<link rel="stylesheet" type="text/css" href="~/vendor/bootstrap/css/bootstrap.min.css">
	<link rel="stylesheet" type="text/css" href="~/fonts/font-awesome-4.7.0/css/font-awesome.min.css">
	<link rel="stylesheet" type="text/css" href="~/fonts/Linearicons-Free-v1.0.0/icon-font.min.css">
	<link rel="stylesheet" type="text/css" href="~/vendor/animate/animate.css">
	<link rel="stylesheet" type="text/css" href="~/vendor/css-hamburgers/hamburgers.min.css">
	<link rel="stylesheet" type="text/css" href="~/vendor/animsition/css/animsition.min.css">
	<link rel="stylesheet" type="text/css" href="~/vendor/select2/select2.min.css">
	<link rel="stylesheet" type="text/css" href="~/vendor/daterangepicker/daterangepicker.css">
	<link rel="stylesheet" type="text/css" href="~/css/util.css">
	<link rel="stylesheet" type="text/css" href="~/css/login.css">
    <style>
        .popup-alert {
            position: fixed;
            text-align: center;
            top: 5px;
            right: 5px;
        }
    </style>
</head>

<body>
    <div class="limiter">
        <div class="container-login100" style="background-image: url('@Url.Content("~/img/bg.jpg")');">
            <div class="wrap-login100 p-l-110 p-r-110 p-t-62 p-b-33">

                <div>
                    @if (TempData["error"] != null)
                    {
                        <div id="popup-alert" class="popup-alert alert alert-danger alert-dismissible fade show text-center"
                             role="alert" style="z-index: 1055; border-radius: 8px;">
                            <div>@TempData["error"]</div>
                        </div>
                    }
                    @if (TempData["success"] != null)
                    {
                        <div id="popup-alert" class="popup-alert alert alert-success alert-dismissible fade show text-center"
                             role="alert" style="z-index: 1055; border-radius: 8px;">
                            <div>@TempData["success"]</div>
                        </div>
                    }
                </div>

                <form  id="loginForm" onsubmit="return submitForm()"  asp-action="DoResetPassword" asp-controller="Auth" method="post" class="login100-form validate-form flex-sb flex-w">
                    <span class="login100-form-title p-b-53">
                        Reset Password
                    </span>

                    @Html.ValidationSummary(true, "", new { @class = "text-danger w-100 text-center mb-2" })

                    <input type="hidden" asp-for="Email" />
                    <input type="hidden" asp-for="Role" />

                    <div class="p-t-13 p-b-9 w-100">
                        <span class="txt1">New Password</span>
                        <span asp-validation-for="@Model.NewPassword" class="text-danger small"></span>
                    </div>
                    <div class="wrap-input100 validate-input">
                        <input asp-for="@Model.NewPassword" class="input100" type="password"
                               data-val="true"
                               data-val-required="New password is required."
                               data-val-minlength="Password must be at least 6 characters."
                               data-val-minlength-min="6"
                               data-val-regex="Password must include at least 1 uppercase letter and 1 number."
                               data-val-regex-pattern="^(?=.*[A-Z])(?=.*\d).{6,}$" />
                        <span class="focus-input100"></span>
                    </div>

                    <div class="p-t-13 p-b-9 w-100">
                        <span class="txt1">Confirm New Password</span>
                        <span asp-validation-for="@Model.ConfirmPassword" class="text-danger small"></span>
                    </div>
                    <div class="wrap-input100 validate-input">
                        <input asp-for="@Model.ConfirmPassword" class="input100" type="password" />
                        <span class="focus-input100"></span>
                    </div>

                    <div class="container-login100-form-btn m-t-17 w-100">
                        <button type="submit" class="login100-form-btn">
                            Reset Password
                        </button>
                    </div>

                    <div class="w-full text-center p-t-30">
                        <a asp-controller="Auth" asp-action="Login" class="txt2 bo1">Back to Login</a>
                    </div>
                </form>

            </div>
        </div>
    </div>

    <div id="loadingOverlay">
		<div class="custom-spinner"></div>
	</div>

    <script src="~/vendor/jquery/jquery-3.2.1.min.js"></script>
	<script src="~/vendor/animsition/js/animsition.min.js"></script>
	<script src="~/vendor/bootstrap/js/popper.js"></script>
	<script src="~/vendor/bootstrap/js/bootstrap.min.js"></script>
	<script src="~/vendor/select2/select2.min.js"></script>
	<script src="~/vendor/daterangepicker/moment.min.js"></script>
	<script src="~/vendor/daterangepicker/daterangepicker.js"></script>
	<script src="~/vendor/countdowntime/countdowntime.js"></script>
	<script src="~/js/login.js"></script>
	<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
	<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
    <script>
        window.setTimeout(function () {
            const alertBox = document.getElementById('popup-alert');
            if (alertBox) {
                alertBox.classList.remove('show');
                alertBox.classList.add('hide');
                setTimeout(() => alertBox.remove(), 500);
            }
        }, 3000);

         function submitForm() {
			var form = $("#loginForm");

			if (!form.valid()) {
				return false;
			}
			const overlay = document.getElementById("loadingOverlay");
			overlay.style.visibility = "visible";
			overlay.style.opacity = "1";

			return true;
		}

        document.addEventListener('keydown', function (e) {
            if (e.key === "Enter") {
                e.preventDefault();
                e.stopPropagation();
                return false;
            }
        });

    </script>
</body>

</html>